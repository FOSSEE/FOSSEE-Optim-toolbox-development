<?xml version="1.0" encoding="UTF-8"?>

<!--
 *
 * This help file was generated from intfmincon.sci using help_from_sci().
 *
 -->

<refentry version="5.0-subset Scilab" xml:id="intfmincon" xml:lang="en"
          xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:ns3="http://www.w3.org/1999/xhtml"
          xmlns:mml="http://www.w3.org/1998/Math/MathML"
          xmlns:scilab="http://www.scilab.org"
          xmlns:db="http://docbook.org/ns/docbook">

  <refnamediv>
    <refname>intfmincon</refname>
    <refpurpose>Solves a constrainted multi-variable mixed integer non linear programming problem</refpurpose>
  </refnamediv>


<refsynopsisdiv>
   <title>Calling Sequence</title>
   <synopsis>
   xopt = intfmincon(f,x0,intcon,A,b)
   xopt = intfmincon(f,x0,intcon,A,b,Aeq,beq)
   xopt = intfmincon(f,x0,intcon,A,b,Aeq,beq,lb,ub)
   xopt = intfmincon(f,x0,intcon,A,b,Aeq,beq,lb,ub,nlc)
   xopt = intfmincon(f,x0,intcon,A,b,Aeq,beq,lb,ub,nlc,options)
   [xopt,fopt] = intfmincon(.....)
   [xopt,fopt,exitflag]= intfmincon(.....)
   [xopt,fopt,exitflag,gradient]=intfmincon(.....)
   [xopt,fopt,exitflag,gradient,hessian]=intfmincon(.....)
   
   </synopsis>
</refsynopsisdiv>

<refsection>
   <title>Parameters</title>
   <variablelist>
   <varlistentry><term>f :</term>
      <listitem><para> a function, representing the objective function of the problem</para></listitem></varlistentry>
   <varlistentry><term>x0 :</term>
      <listitem><para> a vector of doubles, containing the starting values of variables.</para></listitem></varlistentry>
   <varlistentry><term>intcon :</term>
      <listitem><para> a vector of integers, represents which variables are constrained to be integers</para></listitem></varlistentry>
   <varlistentry><term>A :</term>
      <listitem><para> a matrix of double, represents the linear coefficients in the inequality constraints A⋅x ≤ b.</para></listitem></varlistentry>
   <varlistentry><term>b :</term>
      <listitem><para> a vector of double, represents the linear coefficients in the inequality constraints A⋅x ≤ b.</para></listitem></varlistentry>
   <varlistentry><term>Aeq :</term>
      <listitem><para> a matrix of double, represents the linear coefficients in the equality constraints Aeq⋅x = beq.</para></listitem></varlistentry>
   <varlistentry><term>beq :</term>
      <listitem><para> a vector of double, represents the linear coefficients in the equality constraints Aeq⋅x = beq.</para></listitem></varlistentry>
   <varlistentry><term>lb :</term>
      <listitem><para> Lower bounds, specified as a vector or array of double. lb represents the lower bounds elementwise in lb ≤ x ≤ ub.</para></listitem></varlistentry>
   <varlistentry><term>ub :</term>
      <listitem><para> Upper bounds, specified as a vector or array of double. ub represents the upper bounds elementwise in lb ≤ x ≤ ub.</para></listitem></varlistentry>
   <varlistentry><term>nlc :</term>
      <listitem><para> a function, representing the Non-linear Constraints functions(both Equality and Inequality) of the problem. It is declared in such a way that non-linear inequality constraints are defined first as a single row vector (c), followed by non-linear equality constraints as another single row vector (ceq). Refer Example for definition of Constraint function.</para></listitem></varlistentry>
   <varlistentry><term>options :</term>
      <listitem><para> a list, containing the option for user to specify. See below for details.</para></listitem></varlistentry>
   <varlistentry><term>xopt :</term>
      <listitem><para> a vector of doubles, containing the the computed solution of the optimization problem.</para></listitem></varlistentry>
   <varlistentry><term>fopt :</term>
      <listitem><para> a scalar of double, containing the the function value at x.</para></listitem></varlistentry>
   <varlistentry><term>exitflag :</term>
      <listitem><para> a scalar of integer, containing the flag which denotes the reason for termination of algorithm. See below for details.</para></listitem></varlistentry>
   <varlistentry><term>gradient :</term>
      <listitem><para> a vector of doubles, containing the Objective's gradient of the solution.</para></listitem></varlistentry>
   <varlistentry><term>hessian  :</term>
      <listitem><para> a matrix of doubles, containing the Objective's hessian of the solution.</para></listitem></varlistentry>
   </variablelist>
</refsection>

<refsection>
   <title>Description</title>
   <para>
Search the minimum of a mixed integer constrained optimization problem specified by :
Find the minimum of f(x) such that
   </para>
   <para>
<latex>
\begin{eqnarray}
&amp;\mbox{min}_{x}
&amp; f(x) \\
&amp; \text{subject to} &amp; A*x \leq b \\
&amp; &amp; Aeq*x \ = beq\\
&amp; &amp; c(x) \leq  0\\
&amp; &amp; ceq(x) \ =  0\\
&amp; &amp; lb \leq x \leq ub \\
&amp; &amp; x_i \in \!\, \mathbb{Z}, i \in \!\, I
\end{eqnarray}
</latex>
   </para>
   <para>
The routine calls Bonmin for solving the Bounded Optimization problem, Bonmin is a library written in C++.
   </para>
   <para>
The options allows the user to set various parameters of the Optimization problem.
It should be defined as type "list" and contains the following fields.
<itemizedlist>
<listitem>Syntax : options= list("IntegerTolerance", [---], "MaxNodes",[---], "MaxIter", [---], "AllowableGap",[---] "CpuTime", [---],"gradobj", "off", "hessian", "off" );</listitem>
<listitem>IntegerTolerance : a Scalar, a number with that value of an integer is considered integer..</listitem>
<listitem>MaxNodes : a Scalar, containing the Maximum Number of Nodes that the solver should search.</listitem>
<listitem>CpuTime : a Scalar, containing the Maximum amount of CPU Time that the solver should take.</listitem>
<listitem>AllowableGap : a Scalar, to stop the tree search when the gap between the objective value of the best known solution is reached.</listitem>
<listitem>MaxIter : a Scalar, containing the Maximum Number of Iteration that the solver should take.</listitem>
<listitem>gradobj : a string, to turn on or off the user supplied objective gradient.</listitem>
<listitem>hessian : a Scalar, to turn on or off the user supplied objective hessian.</listitem>
<listitem>Default Values : options = list('integertolerance',1d-06,'maxnodes',2147483647,'cputime',1d10,'allowablegap',0,'maxiter',2147483647,'gradobj',"off",'hessian',"off")</listitem>
</itemizedlist>
   </para>
   <para>
The exitflag allows to know the status of the optimization which is given back by Ipopt.
<itemizedlist>
<listitem>exitflag=0 : Optimal Solution Found </listitem>
<listitem>exitflag=1 : InFeasible Solution.</listitem>
<listitem>exitflag=2 : Objective Function is Continuous Unbounded.</listitem>
<listitem>exitflag=3 : Limit Exceeded.</listitem>
<listitem>exitflag=4 : User Interrupt.</listitem>
<listitem>exitflag=5 : MINLP Error.</listitem>
</itemizedlist>
   </para>
   <para>
For more details on exitflag see the Bonmin documentation, go to http://www.coin-or.org/Bonmin
   </para>
   <para>
</para>
</refsection>

<refsection>
   <title>Examples</title>
   <programlisting role="example"><![CDATA[
//Find x in R^2 such that it minimizes:
//f(x)= -x1 -x2/3
//x0=[0,0]
//constraint-1 (c1): x1 + x2 <= 2
//constraint-2 (c2): x1 + x2/4 <= 1
//constraint-3 (c3): x1 - x2 <= 2
//constraint-4 (c4): -x1/4 - x2 <= 1
//constraint-5 (c5): -x1 - x2 <= -1
//constraint-6 (c6): -x1 + x2 <= 2
//constraint-7 (c7): x1 + x2 = 2
//Objective function to be minimised
function [y,dy]=f(x)
y=-x(1)-x(2)/3;
dy= [-1,-1/3];
endfunction
//Starting point, linear constraints and variable bounds
x0=[0 , 0];
intcon = [1]
A=[1,1 ; 1,1/4 ; 1,-1 ; -1/4,-1 ; -1,-1 ; -1,1];
b=[2;1;2;1;-1;2];
Aeq=[1,1];
beq=[2];
lb=[];
ub=[];
nlc=[];
//Options
options=list("GradObj", "on");
//Calling Ipopt
[x,fval,exitflag,grad,hessian] =intfmincon(f, x0,intcon,A,b,Aeq,beq,lb,ub,nlc,options)
// Press ENTER to continue

   ]]></programlisting>
</refsection>

<refsection>
   <title>Examples</title>
   <programlisting role="example"><![CDATA[
//Find x in R^3 such that it minimizes:
//f(x)= x1*x2 + x2*x3
//x0=[0.1 , 0.1 , 0.1]
//constraint-1 (c1): x1^2 - x2^2 + x3^2 <= 2
//constraint-2 (c2): x1^2 + x2^2 + x3^2 <= 10
//Objective function to be minimised
function [y,dy]=f(x)
y=x(1)*x(2)+x(2)*x(3);
dy= [x(2),x(1)+x(3),x(2)];
endfunction
//Starting point, linear constraints and variable bounds
x0=[0.1 , 0.1 , 0.1];
intcon = [2]
A=[];
b=[];
Aeq=[];
beq=[];
lb=[];
ub=[];
//Nonlinear constraints
function [c,ceq,cg,cgeq]=nlc(x)
c = [x(1)^2 - x(2)^2 + x(3)^2 - 2 , x(1)^2 + x(2)^2 + x(3)^2 - 10];
ceq = [];
cg=[2*x(1) , -2*x(2) , 2*x(3) ; 2*x(1) , 2*x(2) , 2*x(3)];
cgeq=[];
endfunction
//Options
options=list("MaxIter", [1500], "CpuTime", [500], "GradObj", "on","GradCon", "on");
//Calling Ipopt
[x,fval,exitflag,output] =intfmincon(f, x0,intcon,A,b,Aeq,beq,lb,ub,nlc,options)
// Press ENTER to continue

   ]]></programlisting>
</refsection>

<refsection>
   <title>Examples</title>
   <programlisting role="example"><![CDATA[
//The below problem is an unbounded problem:
//Find x in R^3 such that it minimizes:
//f(x)= -(x1^2 + x2^2 + x3^2)
//x0=[0.1 , 0.1 , 0.1]
//  x1 <= 0
//  x2 <= 0
//  x3 <= 0
//Objective function to be minimised
function y=f(x)
y=-(x(1)^2+x(2)^2+x(3)^2);
endfunction
//Starting point, linear constraints and variable bounds
x0=[0.1 , 0.1 , 0.1];
intcon = [3]
A=[];
b=[];
Aeq=[];
beq=[];
lb=[];
ub=[0,0,0];
//Options
options=list("MaxIter", [1500], "CpuTime", [500]);
//Calling Ipopt
[x,fval,exitflag,grad,hessian] =intfmincon(f, x0,intcon,A,b,Aeq,beq,lb,ub,[],options)
// Press ENTER to continue

   ]]></programlisting>
</refsection>

<refsection>
   <title>Examples</title>
   <programlisting role="example"><![CDATA[
//The below problem is an infeasible problem:
//Find x in R^3 such that in minimizes:
//f(x)=x1*x2 + x2*x3
//x0=[1,1,1]
//constraint-1 (c1): x1^2 <= 1
//constraint-2 (c2): x1^2 + x2^2 <= 1
//constraint-3 (c3): x3^2 <= 1
//constraint-4 (c4): x1^3 = 0.5
//constraint-5 (c5): x2^2 + x3^2 = 0.75
// 0 <= x1 <=0.6
// 0.2 <= x2 <= inf
// -inf <= x3 <= 1
//Objective function to be minimised
function [y,dy]=f(x)
y=x(1)*x(2)+x(2)*x(3);
dy= [x(2),x(1)+x(3),x(2)];
endfunction
//Starting point, linear constraints and variable bounds
x0=[1,1,1];
intcon = [2]
A=[];
b=[];
Aeq=[];
beq=[];
lb=[0 0.2,-%inf];
ub=[0.6 %inf,1];
//Nonlinear constraints
function [c,ceq,cg,cgeq]=nlc(x)
c=[x(1)^2-1,x(1)^2+x(2)^2-1,x(3)^2-1];
ceq=[x(1)^3-0.5,x(2)^2+x(3)^2-0.75];
cg = [2*x(1),0,0;2*x(1),2*x(2),0;0,0,2*x(3)];
cgeq = [3*x(1)^2,0,0;0,2*x(2),2*x(3)];
endfunction
//Options
options=list("MaxIter", [1500], "CpuTime", [500], "GradObj", "on","GradCon", "on");
//Calling Ipopt
[x,fval,exitflag,grad,hessian] =intfmincon(f, x0,intcon,A,b,Aeq,beq,lb,ub,nlc,options)
// Press ENTER to continue
   ]]></programlisting>
</refsection>

<refsection>
   <title>Authors</title>
   <simplelist type="vert">
   <member>Harpreet Singh</member>
   </simplelist>
</refsection>
</refentry>

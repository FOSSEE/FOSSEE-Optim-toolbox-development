<?xml version="1.0" encoding="UTF-8"?>

<!--
 *
 * This help file was generated from intfminunc.sci using help_from_sci().
 *
 -->

<refentry version="5.0-subset Scilab" xml:id="intfminunc" xml:lang="en"
          xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:ns3="http://www.w3.org/1999/xhtml"
          xmlns:mml="http://www.w3.org/1998/Math/MathML"
          xmlns:scilab="http://www.scilab.org"
          xmlns:db="http://docbook.org/ns/docbook">

  <refnamediv>
    <refname>intfminunc</refname>
    <refpurpose>Solves an unconstrainted multi-variable mixed integer non linear programming optimization problem</refpurpose>
  </refnamediv>


<refsynopsisdiv>
   <title>Calling Sequence</title>
   <synopsis>
   xopt = intfminunc(f,x0)
   xopt = intfminunc(f,x0,intcon)
   xopt = intfminunc(f,x0,intcon,options)
   [xopt,fopt] = intfminunc(.....)
   [xopt,fopt,exitflag]= intfminunc(.....)
   [xopt,fopt,exitflag,gradient,hessian]= intfminunc(.....)
   
   </synopsis>
</refsynopsisdiv>

<refsection>
   <title>Parameters</title>
   <variablelist>
   <varlistentry><term>f :</term>
      <listitem><para> a function, representing the objective function of the problem</para></listitem></varlistentry>
   <varlistentry><term>x0 :</term>
      <listitem><para> a vector of doubles, containing the starting of variables.</para></listitem></varlistentry>
   <varlistentry><term>intcon :</term>
      <listitem><para> a vector of integers, represents which variables are constrained to be integers</para></listitem></varlistentry>
   <varlistentry><term>options:</term>
      <listitem><para> a list, containing the option for user to specify. See below for details.</para></listitem></varlistentry>
   <varlistentry><term>xopt :</term>
      <listitem><para> a vector of doubles, the computed solution of the optimization problem.</para></listitem></varlistentry>
   <varlistentry><term>fopt :</term>
      <listitem><para> a scalar of double, the function value at x.</para></listitem></varlistentry>
   <varlistentry><term>exitflag :</term>
      <listitem><para> a scalar of integer, containing the flag which denotes the reason for termination of algorithm. See below for details.</para></listitem></varlistentry>
   <varlistentry><term>gradient :</term>
      <listitem><para> a vector of doubles, containing the Objective's gradient of the solution.</para></listitem></varlistentry>
   <varlistentry><term>hessian  :</term>
      <listitem><para> a matrix of doubles, containing the Objective's hessian of the solution.</para></listitem></varlistentry>
   </variablelist>
</refsection>

<refsection>
   <title>Description</title>
   <para>
Search the minimum of a multi-variable mixed integer non linear programming unconstrained optimization problem specified by :
Find the minimum of f(x) such that
   </para>
   <para>
<latex>
\begin{eqnarray}
&amp;\mbox{min}_{x}
&amp; f(x)
&amp; x_i \in \!\, \mathbb{Z}, i \in \!\, I
\end{eqnarray}
</latex>
   </para>
   <para>
The routine calls Bonmin for solving the Un-constrained Optimization problem, Bonmin is a library written in C++.
   </para>
   <para>
The options allows the user to set various parameters of the Optimization problem.
It should be defined as type "list" and contains the following fields.
<itemizedlist>
<listitem>Syntax : options= list("IntegerTolerance", [---], "MaxNodes", [---], "CpuTime", [---], "AllowableGap", [---], "MaxIter", [---]);</listitem>
<listitem>IntegerTolerance : a Scalar, containing the Integer tolerance value that the solver should take.</listitem>
<listitem>MaxNodes : a Scalar, containing the maximum nodes that the solver should make.</listitem>
<listitem>MaxIter : a Scalar, containing the Maximum Number of Iteration that the solver should take.</listitem>
<listitem>AllowableGap : a Scalar, containing the allowable gap value that the solver should take.</listitem>
<listitem>CpuTime : a Scalar, containing the Maximum amount of CPU Time that the solver should take.</listitem>
<listitem>gradobj : a string, to turn on or off the user supplied objective gradient.</listitem>
<listitem>hessian : a Scalar, to turn on or off the user supplied objective hessian.</listitem>
<listitem>Default Values : options = list('integertolerance',1d-06,'maxnodes',2147483647,'cputime',1d10,'allowablegap',0,'maxiter',2147483647,'gradobj',"off",'hessian',"off")</listitem>
</itemizedlist>
   </para>
   <para>
The exitflag allows to know the status of the optimization which is given back by Bonmin.
<itemizedlist>
<listitem>exitflag=0 : Optimal Solution Found. </listitem>
<listitem>exitflag=1 : InFeasible Solution.</listitem>
<listitem>exitflag=2 : Output is Continuous Unbounded.</listitem>
<listitem>exitflag=3 : Limit Exceeded.</listitem>
<listitem>exitflag=4 : User Interrupt.</listitem>
<listitem>exitflag=5 : MINLP Error.</listitem>
</itemizedlist>
   </para>
   <para>
For more details on exitflag see the Bonmin page, go to http://www.coin-or.org/Bonmin
   </para>
   <para>
</para>
</refsection>

<refsection>
   <title>Examples</title>
   <programlisting role="example"><![CDATA[
//Find x in R^2 such that it minimizes the Rosenbrock function
//f = 100*(x2 - x1^2)^2 + (1-x1)^2
//Objective function to be minimised
function y= f(x)
y= 100*(x(2) - x(1)^2)^2 + (1-x(1))^2;
endfunction
//Starting point
x0=[-1,2];
intcon = [2]
//Options
options=list("MaxIter", [1500], "CpuTime", [500]);
//Calling
[xopt,fopt,exitflag,gradient,hessian]=intfminunc(f,x0,intcon,options)
// Press ENTER to continue

   ]]></programlisting>
</refsection>

<refsection>
   <title>Examples</title>
   <programlisting role="example"><![CDATA[
//Find x in R^2 such that the below function is minimum
//f = x1^2 + x2^2
//Objective function to be minimised
function y= f(x)
y= x(1)^2 + x(2)^2;
endfunction
//Starting point
x0=[2,1];
intcon = [1];
[xopt,fopt]=intfminunc(f,x0,intcon)
// Press ENTER to continue

   ]]></programlisting>
</refsection>

<refsection>
   <title>Examples</title>
   <programlisting role="example"><![CDATA[
//The below problem is an unbounded problem:
//Find x in R^2 such that the below function is minimum
//f = - x1^2 - x2^2
//Objective function to be minimised
function [y,g,h] = f(x)
y = -x(1)^2 - x(2)^2;
g = [-2*x(1),-2*x(2)];
h = [-2,0;0,-2];
endfunction
//Starting point
x0=[2,1];
intcon = [1]
options = list("gradobj","ON","hessian","on");
[xopt,fopt,exitflag,gradient,hessian]=intfminunc(f,x0,intcon,options)
   ]]></programlisting>
</refsection>
</refentry>
